define(['Class','jquery', 'underscore', 'TweenLite', 'TimelineLite', 'Signal', 'ui/FadeIn'], function(Class, $, _, TweenLite, TimelineLite, Signal, FadeIn){
	var Global = new Class({
		breakPoints: {
			'mobile': 0,
			'tabletPortrait': 768,
			'tabletLandscape': 992,
			'desktop': 1280
		},
		currentWidthType: 1280,
		width: 1280,
		spinOpts: {
			lines: 12, // The number of lines to draw
			length: 10, // The length of each line
			width: 6, // The line thickness
			radius: 13 // The radius of the inner circle
		},
		pathArray: null,
		firstLevelLocation: null,
		secondLevelLocation: null,
		windowHeight: null,
		newHash: null,
		videoPlaying: false,
		videoFinished: false,
		videoInFullScreen: false,
		onVideoInactive: null,
		coverAnimating: false,
		menuOpen: false,
		/* GLOBAL from particles */
		videoID: '8sdLAHzZVMc',//sunday
		now: 0,
		assetsPath: "img/particles/",
		assetsAutoGeneratedPath: "img/particles/",
		phpUploadPath: "assetsDropboxSymLink/",
		assetsAutoGeneratedSubPath: "autoAssets/",
		textureNotFound: "textures/textureNotFound.jpg",
		//particleDBSavePath: "/particles",
		particleDBSavePath: "data/particles",
		particleDBLoadPath: "data/particles",
		aspectRatio: 2,
		mouseStrength: 1,
		FloatArraysSupported: false,
		isLoading: false,
		loadingStartedSignal: null,
		loadingFinishedSignal: null,
		noBeforeUnload: null,
		renderText: "STORYTELLING.\nCRAFT. TECHNOLOGY.",

		// FLAGS
		isMobile: false,

		// Signals
		onResponsiveImgsSrcSet: null,
		onResize: null,

		initialize: function(){
			this.onResponsiveImgsSrcSet = new Signal();
			this.onResize = new Signal();
			this.onVideoInactive = new Signal();
			this.onVideoFullScreenChange = new Signal();
			this.onNavItemClicked = new Signal();
			this.navOpened = new Signal();
			this.navClosed = new Signal();
			this.loadingStartedSignal = new Signal();
			this.loadingFinishedSignal = new Signal();
			this.isIOS8 = this.checkIOS8();

			this.renderText = frontpage_quote || this.renderText;
			/**
			 * requestAnimationFrame and cancel polyfill
			 */
			(function(){
				var lastTime = 0;
				var vendors = ['ms', 'moz', 'webkit', 'o'];
				for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
					window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
					window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
				}

				if (!window.requestAnimationFrame){
					window.requestAnimationFrame = function(callback, element){
						var currTime = new Date().getTime();
						var timeToCall = Math.max(0, 16 - (currTime - lastTime));
						var id = window.setTimeout(function() { callback(currTime + timeToCall); },
								timeToCall);
						lastTime = currTime + timeToCall;
						return id;
					};
				}
				if (!window.cancelAnimationFrame){
					window.cancelAnimationFrame = function(id) {
						clearTimeout(id);
					};
				}
			}());

			// Dummy implementations of other console features to prevent error messages
			// in browsers not supporting it.
			if (!console["clear"]) console["clear"] = function() {};
			if (!console["trace"]) console["trace"] = function() {};
			if (!console["group"]) console["group"] = function() {};
			if (!console["groupCollapsed"]) console["groupCollapsed"] = function() {};
			if (!console["groupEnd"]) console["groupEnd"] = function() {};
			if (!console["timeStamp"]) console["timeStamp"] = function() {};
			if (!console["profile"]) console["profile"] = function() {};
			if (!console["profileEnd"]) console["profileEnd"] = function() {};
			if (!console["count"]) console["count"] = function() {};

			//Function to center an element on the page
			jQuery.fn.center = function(parent) {
				parent = parent ? this.parent() : window;

				this.css({
					"position": "fixed",
					"top": ((($(parent).height() - this.outerHeight()) / 2) + $(parent).scrollTop() + "px"),
					"left": ((($(parent).width() - this.outerWidth()) / 2) + $(parent).scrollLeft() + "px")
				});

				return this;
			};

			this.introTextResized = new Signal();
			this.introTextAnimatedIn = new Signal();

			this.pathArray = window.location.pathname.split('/');
			this.firstLevelLocation = this.pathArray[1];
			this.secondLevelLocation = this.pathArray[2];

			this.windowHeight = window.innerHeight;

			this.getWidthType();

			// Before Refreshing the page, Fadeout and Scroll to the top.
			$(window).on('beforeunload', function(e) {
				if(this.noBeforeUnload == null){
					TweenLite.to($('body'), 0.5, {opacity: 0, ease: Linear.easeNone, onComplete: function(){
						$(window).scrollTop(0);
					}});
				} else {
					this.noBeforeUnload = null;
				}
			}.bind(this));

			// Initialize responsive images.
			this.initResponsiveImages();

			this.widthRespond = this.widthRespond.bind(this);

			// Initialize Width listener for responsive images.
			_.delay(this.widthRespond, 100, 'logged later');

			// Set debounced resize handler
			$(window).on('resize', this.widthRespond);

			this.initGifReplace();
		},

		getWidthType: function() {
			var _this = this;
			var realWidth = window.innerWidth;
			this.width = $(window).width();

			this.height = $(window).height();
			var currentType;

			//This is still a little buggy if the browser is right on breakpoint 992
			//i wonder if browsers handle scroll bars differently in their media queries..
			$.each(this.breakPoints, function(key) {
				if (parseInt(this, 10) > realWidth) { // looking at a width type whose minimum is wider than current browser size
					return false; // break
				}
				currentType = key;
			});

			_this.currentWidthType = currentType;

			// set isMobile
			if (_this.currentWidthType === 'desktop' || _this.currentWidthType === 'tabletLandscape') {
				this.isMobile = false;
			} else {
				this.isMobile = true;
			}

			return currentType;
		},

		animateHeaderTitle: function(delay, reverse){
			delay = delay || 0;

			// Get work title width
			var workTitleWidth = $('.work-title .inner-holder').width();

			var headerTimeline = new TimelineLite({paused: true, delay: delay});

			headerTimeline.fromTo($('.work-title-slash'), 0.8, {opacity: 0, visibility: 'visible', left: -10}, {opacity: 1, left: 0, visibility: 'visible', ease: Expo.easeOut});
			headerTimeline.set($('.work-title'), {visibility: 'visible'});
			headerTimeline.fromTo($('.work-title .inner-holder'), 0.8, {left: -workTitleWidth, visibility: 'visible'}, {left: 0, visibility: 'visible', ease: Expo.easeOut}, '-=0.4');
			headerTimeline.fromTo($('.nav-back-arrow'), 0.8, {width: 0}, {width: 28, ease: Expo.easeInOut}, '-=0.6');
			headerTimeline.fromTo($('.nav-back-arrow .icon-arrow-right'), 0.5, {left: 25, opacity: 0}, {left: 0, opacity: 1, ease: Expo.easeOut}, '-=0.4');

			if (reverse){
				headerTimeline.reverse(0);
			} else {
				headerTimeline.play();
			}
		},

		/*
		 * swaps out static image for gif
		 */
		onGifClick: function (e) {
			var target = $(e.target);
			target.removeClass('responsive');
			target.attr('src', target.data('src-gif'));
		},

		initGifReplace: function () {
			var resize = this.imgRespond.bind(this);
			$('body').on('click', 'img.gif-replace', this.onGifClick);
			var main = $('main');
			var lastCheck = new Date();

			main.scroll(function() {
				var checkTime = new Date();
				if(checkTime - lastCheck > 2000) {
					lastCheck = checkTime;
					var height = main.height();
					var doResize = false;

					$('img.gif-replace:not(.responsive)').each(function() {
						var el = $(this);
						var offset = el.offset().top;

						if(offset < -height || offset > height) {
							el.addClass('responsive');
							doResize = true;
						}
					});

					if(doResize) {
						resize();
					}
				}
			});
		},

		/*
		 * Look at browser width and switch image sources of responsive images
		 *
		 * Image tags with the 'responsive' class are looked at. The attributes
		 * data-src-<type> are considered where type is mobile, tabletPortrait,
		 * tabletLandscape, desktop, and the source of the current width type or the
		 * biggest smaller one is used.
		 *
		 * For instance, if the current width is 800 and only data-src-mobile and
		 * data-src-desktop are defined, data-src-mobile will be used. If
		 * data-src-mobile and data-src-tabletPortrait are defined,
		 * data-src-tabletPortrait would be used since it better describes a width
		 * of 800 pixels.
		 *
		 * data-src-mobile is automatically copied from the initial src attribute.
		 */
		imgRespond: function() {
			var _this = this;
			var sizes = _.keys(this.breakPoints);
			var sizeType = _this.currentWidthType;
			var sizeLength = sizes.length;
			$('img.responsive').each(function() {
				var $img = $(this);
				if(sizeType !== 'mobile' && $img.hasClass('gif-replace')){
					$img.removeClass('responsive');
					src = $img.data('src-gif');
				} else {
					var src;
					for (var i = 0; i < sizeLength; i += 1) {
						var size = sizes[i];
						if (size === sizeType){
							src = $img.data('src' + sizeType.charAt(0).toUpperCase() + sizeType.slice(1).toLowerCase()); // change case since $ loads data that way
						}
					}
				}

				// Remove all responsive classes
				for (var j = 0; j < sizeLength; j += 1) {
					$img.removeClass('responsive-' + sizes[j]);
				}

				// Add responsive class
				$img.addClass('responsive-' + sizeType);
				$img.attr('src', src);
			});

			this.onResponsiveImgsSrcSet.dispatch();
		},
		initResponsiveImages: function() {
			$('img.responsive').each(function() {
				if(typeof ($(this).data('src-mobile')) === 'undefined') {
					$(this).data('src-mobile', $(this).attr('src'));
				}
			});
			this.onResponsiveImgsSrcSet.dispatch();
		},
		/*
		 * Call all functions which should happen when the browser window has
		 * resized, and emit the widthRespond event so page-specific methods can
		 * fire too
		 */
		widthRespond: function() {
			console.log('width respond');
			this.getWidthType();
			this.windowHeight = this.height;
			this.imgRespond();
			this.onResize.dispatch(this.width, this.height);
			$(document).trigger('widthRespond');
		},
		setSize: function(width, height){
			this.width = width === undefined ? window.innerWidth : width;
			this.height = height === undefined ? window.innerHeight : height;
			this.widthHalf = this.width * .5;
			this.heightHalf = this.height * .5;
			this.aspectRatio = this.width / this.height;
		},
		checkIOS8: function() {
			var iOS = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
			return (iOS && parseInt(iOS[1], 10) >= 8);
		}
	});

	Global.instance = new Global();
	return Global.instance;
});
